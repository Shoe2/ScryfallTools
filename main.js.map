{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/deck-muse/deck-muse.component.ts","./src/app/deck-muse/deck-muse.component.html","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/app/janklord-commander-generator/janklord-commander-generator.component.ts","./src/app/janklord-commander-generator/janklord-commander-generator.component.html","./src/app/token/services/token.service.ts","./src/app/token/token.component.ts","./src/app/token/token.component.html","./src/app/token/types/problem-cards.ts","./src/app/token/types/token.ts","./src/app/tribal/tribal.component.ts","./src/app/tribal/tribal.component.html","./src/app/tribal/tribal.service.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { DeckMuseComponent } from './deck-muse/deck-muse.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { JanklordCommanderGeneratorComponent } from './janklord-commander-generator/janklord-commander-generator.component';\r\nimport { TokenComponent } from './token/token.component';\r\nimport { TribalComponent } from './tribal/tribal.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'token', component: TokenComponent },\r\n  { path: 'tribal', component: TribalComponent },\r\n  { path: 'deckmuse', component: DeckMuseComponent },\r\n  { path: 'janklord', component: JanklordCommanderGeneratorComponent },\r\n  { path: '**', component: HomeComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, {})],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'ScryfallTools';\r\n}\r\n","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { TokenComponent } from './token/token.component';\r\nimport { TribalComponent } from './tribal/tribal.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { DatePipe } from '@angular/common';\r\nimport { DeckMuseComponent } from './deck-muse/deck-muse.component';\r\nimport { JanklordCommanderGeneratorComponent } from './janklord-commander-generator/janklord-commander-generator.component';\r\n\r\n@NgModule({ declarations: [\n        AppComponent,\n        TokenComponent,\n        TribalComponent,\n        HomeComponent,\n        DeckMuseComponent,\n        JanklordCommanderGeneratorComponent\n    ],\n    bootstrap: [AppComponent], imports: [BrowserModule,\n        AppRoutingModule], providers: [DatePipe, provideHttpClient(withInterceptorsFromDi())] })\r\nexport class AppModule { }\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { forkJoin, Subscription } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { ScryfallAPIResponse } from '../scryfall-apiresponse';\r\n\r\n@Component( {\r\n  selector: 'app-deck-muse',\r\n  templateUrl: './deck-muse.component.html',\r\n  styleUrls: [ './deck-muse.component.css' ]\r\n} )\r\nexport class DeckMuseComponent implements OnInit {\r\n  ideas: string[] = [];\r\n  colorsForIdea: string[] = [];\r\n  subscriptions: Subscription[] = [];\r\n  sets = [ \r\n    'keyword-abilities', \r\n    'creature-types', \r\n    'planeswalker-types', \r\n    'land-types',\r\n    'artifact-types',\r\n    'enchantment-types',\r\n    'spell-types',\r\n    'keyword-actions',\r\n    'ability-words'];\r\n\r\n    color = ['W', 'U', 'B', 'R', 'G', 'C'];\r\n\r\n    themes: ScryfallAPIResponse[] = [];\r\n\r\n  constructor( private readonly $http: HttpClient ) { }\r\n\r\n  ngOnInit(): void {\r\n    const observables = [];\r\n    for ( let set of this.sets ) {\r\n      observables.push( this.$http.get( 'https://api.scryfall.com/catalog/' + set ) )\r\n    }\r\n\r\n    this.subscriptions.push(\r\n      forkJoin( observables ).subscribe((results: ScryfallAPIResponse[])=>{\r\n        this.themes = results;\r\n      })\r\n\r\n    )\r\n  }\r\n\r\n  generateDeckIdea(){\r\n\r\n    this.colorsForIdea = [];\r\n    this.ideas = [];\r\n\r\n    this.color.forEach((color) => {\r\n      const isColor = Math.floor(Math.random() * 2);\r\n      if(isColor === 1){\r\n        this.colorsForIdea.push(color);\r\n      }\r\n    });\r\n\r\n    const ideaCategory1 = Math.floor(Math.random() * 9);\r\n    const ideaCategory2 = Math.floor(Math.random() * 9);\r\n\r\n    const numberOfChoices1 = (this.themes[ideaCategory1].data as string[]).length\r\n    const numberOfChoices2 = (this.themes[ideaCategory2].data as string[]).length\r\n\r\n    const randomChoice1 = Math.floor(Math.random() * numberOfChoices1);\r\n    const randomChoice2 = Math.floor(Math.random() * numberOfChoices2);\r\n    \r\n\r\n    this.ideas.push(this.themes[ideaCategory1].data[randomChoice1] as string)\r\n    this.ideas.push(this.themes[ideaCategory2].data[randomChoice2] as string)\r\n\r\n  }\r\n\r\n}\r\n","Random Deck Theme Generator\r\n<button (click)=\"generateDeckIdea()\">Generate</button>\r\n\r\n\r\n<div *ngIf=\"ideas.length > 0\">\r\n<h4>Deck Idea:</h4>\r\n<div>make a {{ideas[0]}} and {{ideas[1]}} deck</div>\r\n<div> that is</div>\r\n<div *ngFor=\"let color of colorsForIdea\">{{color}}</div>\r\n\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<a [routerLink]=\"['/token']\">Token Tracker</a>\r\n<br/>\r\n<a [routerLink]=\"['/tribal']\">Tribal Wars Info</a>\r\n<br/>\r\n<a [routerLink]=\"['/deckmuse']\">Deck Muse</a>\r\n<br/>\r\n<a [routerLink]=\"['/janklord']\">Janklord Commander Generator (Random Commander or commanders worth less than $0.79 USD)</a>","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ScryfallCard } from 'scryfall-ts/build/ScryfallCard';\r\nimport { ScryfallAPIResponse } from '../scryfall-apiresponse';\r\n\r\n@Component( {\r\n  selector: 'app-janklord-commander-generator',\r\n  templateUrl: './janklord-commander-generator.component.html',\r\n  styleUrls: [ './janklord-commander-generator.component.css' ]\r\n} )\r\nexport class JanklordCommanderGeneratorComponent implements OnInit {\r\n  selectedCommander?: ScryfallCard;\r\n  partner?: ScryfallCard;\r\n  constructor( private readonly $http: HttpClient ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  newCommander() {\r\n    const url = 'https://api.scryfall.com/cards/random?q=%20is%3Acommander+usd%3C%3D0.79+format%3Acommander';\r\n    this.$http.get( url ).subscribe( ( response: ScryfallCard ) => {\r\n      this.selectedCommander = response;\r\n\r\n      if ( this.selectedCommander.keywords && this.selectedCommander.keywords.length && this.selectedCommander.keywords.includes( 'Partner' ) ) {\r\n        const url = 'https://api.scryfall.com/cards/random?q=%20is%3Acommander+usd%3C%3D0.79+format%3Acommander+keyword%3Apartner+-o%3A\"partner+with\"';\r\n        this.$http.get( url ).subscribe( ( response: ScryfallCard ) => {\r\n          this.partner = response;\r\n\r\n        } );\r\n      }\r\n\r\n      // if ( this.selectedCommander.keywords.includes( 'Friends Forever' ) ) {\r\n      //   const url = 'https://api.scryfall.com/cards/random?q=%20is%3Acommander+usd%3C%3D0.79+format%3Acommander+keyword%3A';\r\n      //   this.$http.get( url ).subscribe( ( response: ScryfallAPIResponse ) => {\r\n      //     this.partner = response.data as ScryfallCard;\r\n\r\n      //   } );\r\n      // }\r\n\r\n    } )\r\n  }\r\n\r\n}\r\n","<h1>Quest for the Janklord Random Commander Generator</h1>\r\n<button (click)=\"newCommander()\">\r\n    <img style=\"height:200px;width:200px\"\r\n        src=\"https://c1.scryfall.com/file/scryfall-cards/art_crop/front/6/7/67b369c4-faa8-45c8-a1b9-98f228b69682.jpg\"/>\r\n</button>\r\n<br />\r\n\r\n<div id=\"commanderDisplay\">\r\n    {{selectedCommander?.name}} and {{partner.name}}\r\n</div>","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Token } from '../types/token';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TokenService {\r\n\r\n  constructor(private $http: HttpClient) { }\r\n\r\n  dedupeTokens(tokens: Token[]) {\r\n    const uniqueTokens: Token[] = [];\r\n\r\n    tokens.forEach( ( token ) => {\r\n      let isDupe = false;\r\n      if ( token.Text.includes( \"This token can be used to represent a token that's a copy of a permanent.\" ) ) {\r\n        isDupe = true;\r\n      }\r\n\r\n      if(token.TypeLine === \"Card\"){\r\n        isDupe = true;\r\n      }\r\n\r\n      if ( token.Text ) {\r\n        token.Text = token.Text.replace( /\\s?\\(.*\\)/g, '' );\r\n      }\r\n\r\n      for ( var i = 0; i < uniqueTokens.length; i++ ) {\r\n        if ( token.Name === uniqueTokens[ i ].Name &&\r\n          token.Power === uniqueTokens[ i ].Power &&\r\n          token.Toughness === uniqueTokens[ i ].Toughness &&\r\n          token.Colors.toString() === uniqueTokens[ i ].Colors.toString() &&\r\n          token.Text === uniqueTokens[ i ].Text &&\r\n          token.TypeLine === uniqueTokens[ i ].TypeLine\r\n        ) {\r\n          isDupe = true;\r\n          break;\r\n        }\r\n      }\r\n      if ( !isDupe )\r\n        uniqueTokens.push( token );\r\n    } )\r\n\r\n   return uniqueTokens;\r\n  }\r\n\r\n  getCardByUri( url: string ) {\r\n    return this.$http.get( url );\r\n  }\r\n\r\n}\r\n","import { DatePipe } from '@angular/common';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ScryfallCard } from 'node_modules/scryfall-ts/build/ScryfallCard';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { ScryfallCardFace } from 'scryfall-ts/build/ScryfallCardFace';\r\nimport { ScryfallColor } from 'scryfall-ts/build/ScryfallColor';\r\nimport { environment } from '../../environments/environment';\r\nimport { ScryfallAPIResponse } from '../scryfall-apiresponse';\r\nimport { TokenService } from './services/token.service';\r\nimport { Token } from './types/token';\r\nimport { problemCards } from './types/problem-cards';\r\n\r\n@Component( {\r\n  selector: 'app-token',\r\n  templateUrl: './token.component.html',\r\n  styleUrls: [ './token.component.css' ]\r\n} )\r\nexport class TokenComponent implements OnInit {\r\n\r\n  subscriptions = [];\r\n  tokens: Token[] = [];\r\n  cardsThatMakeTokens: ScryfallCard[] = [];\r\n  orphanedCards: ScryfallCard[] = [];\r\n  loadingSource = new BehaviorSubject<number>( 0 );\r\n  loading = this.loadingSource.asObservable();\r\n  isLoading = true;\r\n\r\n  problemCards = problemCards;\r\n\r\n  constructor( private $http: HttpClient, private datePipe: DatePipe, private tokenService: TokenService ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getNextPageOfCards( environment.prefix + \"/search?q=t%3Atoken+-set%3Atbth+-set%3Atdag+-set%3Atfth+-%28set%3Atust+is%3Adfc%29&unique=cards\", true, \"token\" );\r\n    this.getNextPageOfCards(\r\n      environment.prefix +\r\n      `/search?q=game%3Apaper+fo%3A%2F%5Cbcreate%5Cb%2F+include%3Aextras+-t%3Aemblem+-t%3Atoken+-border%3Agold+date<%3D${ this.makeDateStringForTomorrow() }+&unique=cards`\r\n      , true, \"card\" );\r\n    this.loading.subscribe( () => {\r\n      if ( this.loadingSource.value > 0 && this.subscriptions.length === this.loadingSource.value ) {\r\n        console.log( 'data loaded' );\r\n        this.subscriptions.forEach( subscription => subscription.unsubscribe() );\r\n        this.dedupeTokens();\r\n        this.associateCardsWithTokens();\r\n      }\r\n    } )\r\n  }\r\n\r\n  ngOnDestrory() {\r\n    this.subscriptions.forEach( subscription => subscription.unsubscribe() );\r\n  }\r\n\r\n  makeDateStringForTomorrow() {\r\n    const today = new Date()\r\n    const tomorrow = new Date( today )\r\n    tomorrow.setDate( tomorrow.getDate() + 1 )\r\n    return this.datePipe.transform( tomorrow, 'YYYY-MM-dd' );\r\n  }\r\n\r\n  getNextPageOfCards( url: string, clearOldData = false, tokenOrCard: string ) {\r\n    this.subscriptions.push( this.$http.get( url )\r\n      .subscribe(\r\n        ( response: ScryfallAPIResponse ) => {\r\n          if ( response.has_more ) {\r\n            this.getNextPageOfCards( response.next_page, false, tokenOrCard );\r\n          }\r\n          if ( tokenOrCard === \"token\" ) {\r\n            if ( clearOldData ) {\r\n              this.tokens = [];\r\n            }\r\n\r\n            ( <ScryfallCard[]>response.data ).forEach( ( token: ScryfallCard, index: number ) => {\r\n              if ( token.card_faces && token.card_faces.length > 1 ) {\r\n                token.card_faces.forEach( ( face: ScryfallCardFace ) => {\r\n\r\n                  if (\r\n                    face.name != \"Horror\"\r\n                    && !( face.name === \"Elemental\" && face.illustration_id === \"37071500-1a8d-4298-9202-1931cd2bb073\" )\r\n                    && !( face.name === 'Mowu' && !face.colors.length )\r\n                    && !( face.name === \"Zombie\" && !face.colors.length )\r\n                    && !( face.name === \"Wolf\" && face.colors.includes( ScryfallColor.W ) )\r\n                  ) {\r\n                    //Hack to remove BU horror token and Mowu face that are falsly colorless in scryfall data\r\n                    const tokenData = new Token(\r\n                      face.power,\r\n                      face.toughness,\r\n                      face.name === 'Treasure' ? [] : face.colors,\r\n                      face.name,\r\n                      face.type_line,\r\n                      face.oracle_text ? face.oracle_text.replace( /\\s?\\(.*\\)/g, '' ) : '',\r\n                      face.image_uris\r\n                    )\r\n\r\n                    this.tokens.push( tokenData );\r\n                  }\r\n                } );\r\n\r\n              }\r\n              else {\r\n                if ( token.name.includes( \"Vizier of Many Faces\" ) ) {\r\n                  const cardUri = token.all_parts.filter( part => part.component === \"combo_piece\" )[ 0 ].uri;\r\n                  this.tokenService.getCardByUri( cardUri ).subscribe( ( card: ScryfallCard ) => {\r\n\r\n                    this.tokens.filter( tokenInstance => tokenInstance.Name === \"Vizier of Many Faces\" )[ 0 ].CreatedBy.push( card );\r\n                  } );\r\n                }\r\n                this.tokens.push(\r\n                  new Token(\r\n                    token.power,\r\n                    token.toughness,\r\n                    token.colors,\r\n                    token.name,\r\n                    token.type_line,\r\n                    token.oracle_text,\r\n                    token.image_uris\r\n                  ) );\r\n              }\r\n\r\n\r\n              if ( index === (response.data as ScryfallCard[]).length - 1 ) {\r\n                this.loadingSource.next( this.loadingSource.value + 1 );\r\n                this.tokens.sort( ( a, b ) => {\r\n                  if ( a.Name < b.Name ) {\r\n                    return -1;\r\n                  }\r\n                  if ( a.Name > b.Name ) {\r\n                    return 1;\r\n                  }\r\n                  return 0;\r\n                } );\r\n              }\r\n            } );\r\n\r\n          }\r\n          else if ( tokenOrCard === \"card\" ) {\r\n            if ( clearOldData ) {\r\n              this.cardsThatMakeTokens = [];\r\n            }\r\n            this.cardsThatMakeTokens = this.cardsThatMakeTokens.concat( <ScryfallCard[]>response.data );\r\n            this.loadingSource.next( this.loadingSource.value + 1 );\r\n\r\n          }\r\n        }, ( error: HttpErrorResponse ) => {\r\n          console.log( error );\r\n        } ) );\r\n  }\r\n\r\n  dedupeTokens() {\r\n    this.tokens = this.tokenService.dedupeTokens( this.tokens )\r\n  }\r\n\r\n  associateCardsWithTokens() {\r\n    this.isLoading = true;\r\n    this.cardsThatMakeTokens.forEach( ( card: ScryfallCard, index: number ) => {\r\n      this.tokensThisCardMakes( card );\r\n      if ( index === this.cardsThatMakeTokens.length - 1 ) {\r\n        const germToken = this.tokens.find( token => token.Name === \"Germ\" );\r\n        const phyrexianGermToken = this.tokens.find( token => token.Name === \"Phyrexian Germ\" )\r\n        phyrexianGermToken.CreatedBy = phyrexianGermToken.CreatedBy.concat( germToken.CreatedBy );\r\n        this.tokens = this.tokens.filter( token => token.Name !== \"Germ\" );\r\n\r\n        this.isLoading = false;\r\n      }\r\n    } );\r\n  }\r\n\r\n  tokensThisCardMakes( card: ScryfallCard ) {\r\n    if ( this.problemCards.includes( card.name ) ) {\r\n      return;\r\n    }\r\n    if ( card.all_parts && card.all_parts ) {\r\n      card.all_parts.forEach( ( relatedCard ) => {\r\n        if ( relatedCard.component === \"token\" ) {\r\n          let tempTokens = this.tokens.filter(\r\n            tokenData => tokenData.Name === relatedCard.name\r\n              && tokenData.TypeLine === tokenData.TypeLine\r\n          );\r\n          if ( tempTokens.length === 1 ) {\r\n            if ( !tempTokens[ 0 ].CreatedBy.includes( card ) )\r\n              tempTokens[ 0 ].CreatedBy.push( card );\r\n          }\r\n          else if ( relatedCard.type_line.includes( 'Token' ) && card.name != 'Valkyrie Harbinger' && card.name != 'Rampage of the Valkyries' ) {\r\n            this.tokenService.getCardByUri( relatedCard.uri ).subscribe( ( token: ScryfallCard ) => {\r\n              let tempTokens = this.tokens.filter(\r\n                tokenData => tokenData.Name === token.name\r\n                  && tokenData.TypeLine === token.type_line\r\n                  && tokenData.Text === token.oracle_text.split( ' (' )[ 0 ]\r\n                  && tokenData.Power === token.power\r\n                  && tokenData.Toughness === token.toughness\r\n                  && this.compareColorsByArray( token.colors, tokenData.Colors )\r\n              );\r\n\r\n              tempTokens.length === 1 ? tempTokens[ 0 ].CreatedBy.push( card ) : [];\r\n            } );\r\n          }\r\n          else {\r\n            this.findTokensMadeByCardOracleText( card );\r\n          }\r\n        }\r\n      } );\r\n    } else {\r\n      this.findTokensMadeByCardOracleText( card );\r\n    }\r\n  }\r\n\r\n  findTokensMadeByCardOracleText( card: ScryfallCard ) {\r\n    let createsNothing = true;\r\n    let allFacesText = '';\r\n\r\n    if ( card.card_faces && card.card_faces.length > 1 ) {\r\n      for ( const faces of card.card_faces ) {\r\n        allFacesText += faces.oracle_text;\r\n      }\r\n    } else {\r\n      allFacesText = card.oracle_text;\r\n    }\r\n\r\n    if ( allFacesText.includes( 'Blood' ) ) {\r\n      createsNothing = false;\r\n      const bloodToken = this.tokens.find( token => token.Name === 'Blood' )\r\n      if ( !bloodToken.CreatedBy.includes( card ) )\r\n        bloodToken.CreatedBy.push( card );\r\n    }\r\n    if ( allFacesText.includes( 'Food' ) ) {\r\n      createsNothing = false;\r\n      const foodToken = this.tokens.find( token => token.Name === 'Food' )\r\n      if ( !foodToken.CreatedBy.includes( card ) )\r\n        foodToken.CreatedBy.push( card );\r\n    }\r\n    if ( allFacesText.includes( 'Treasure' ) ) {\r\n      createsNothing = false;\r\n      const treasureToken = this.tokens.find( token => token.Name === 'Treasure' );\r\n      if ( !treasureToken.CreatedBy.includes( card ) )\r\n        treasureToken.CreatedBy.push( card );\r\n    }\r\n    if ( allFacesText.includes( 'Powerstone' ) ) {\r\n      createsNothing = false;\r\n      const powerstoneToken = this.tokens.find( token => token.Name === 'Powerstone' );\r\n      if ( !powerstoneToken.CreatedBy.includes( card ) )\r\n      powerstoneToken.CreatedBy.push( card );\r\n    }\r\n    if ( allFacesText.includes( 'Gold token' ) ) {\r\n      createsNothing = false;\r\n      const goldToken = this.tokens.find( token => token.Name === 'Gold' );\r\n      if ( !goldToken.CreatedBy.includes( card ) )\r\n        goldToken.CreatedBy.push( card );\r\n    }\r\n    if ( allFacesText.includes( 'Walker token' ) ) {\r\n      createsNothing = false;\r\n      const walkerToken = this.tokens.find( token => token.Name === 'Walker' );\r\n      if ( !walkerToken.CreatedBy.includes( card ) )\r\n        walkerToken.CreatedBy.push( card );\r\n    }\r\n    if ( allFacesText.includes( 'Clue' ) || allFacesText.includes( 'Investigate' ) ) {\r\n      createsNothing = false;\r\n      const clueToken = this.tokens.find( token => token.Name === 'Clue' )\r\n      if ( !clueToken.CreatedBy.includes( card ) )\r\n        clueToken.CreatedBy.push( card );\r\n    }\r\n    if ( allFacesText.toLocaleLowerCase().includes( 'that\\'s a copy' )\r\n      || allFacesText.toLocaleLowerCase().includes( 'that are copies' )\r\n      || allFacesText.toLocaleLowerCase().includes( 'create a copy' )\r\n      || allFacesText.toLocaleLowerCase().includes( 'create a token copy' )\r\n      || allFacesText.toLocaleLowerCase().includes( 'tokens that are copies' )\r\n      || allFacesText.toLocaleLowerCase().includes( 'tokens that are each copies' )\r\n    ) {\r\n      createsNothing = false;\r\n      const copyToken = this.tokens.find( token => token.Name === 'Copy' );\r\n      if ( !copyToken.CreatedBy.includes( card ) )\r\n        copyToken.CreatedBy.push( card );\r\n    }\r\n\r\n    if ( this.problemCards.includes( card.name ) ) {\r\n      this.tokens.filter( token => this.processTokenText( allFacesText, token.Text.replace( /\\s?\\(.*\\)/g, '' ), card.name ) );\r\n\r\n    }\r\n\r\n    let tempToken = this.tokens.filter( token =>\r\n      allFacesText.includes( token.Name )\r\n      && this.processTokenText( allFacesText, token.Text.replace( /\\s?\\(.*\\)/g, '' ), token.Name )\r\n      && this.processPowerAndToughness( allFacesText, token )\r\n      && this.processTypeLine( token.TypeLine, allFacesText )\r\n      && this.compareColors( allFacesText, token.Colors )\r\n    );\r\n\r\n    if ( tempToken && tempToken.length ) {\r\n      createsNothing = false;\r\n      for ( let token of tempToken ) {\r\n        if ( !token.CreatedBy.includes( card ) )\r\n          token.CreatedBy.push( card );\r\n      }\r\n    }\r\n\r\n    else if ( createsNothing && !card.type_line.includes( \"Card\" ) ) {\r\n      // CREATE TOKEN or IGNORE ME\r\n      const cardTextLowerCase = allFacesText.toLocaleLowerCase();\r\n      if (\r\n        !cardTextLowerCase.includes( 'would create' )\r\n        && !( cardTextLowerCase.includes( 'create your deck' ) )\r\n        && !( cardTextLowerCase.includes( 'whenever you create' ) )\r\n      )\r\n        this.orphanedCards.push( card );\r\n    }\r\n\r\n    tempToken = null;\r\n  }\r\n\r\n  processTypeLine( typeLine: string, cardOracleText: string ): boolean {\r\n\r\n    // if(cardOracleText.includes('Celestine Cave Witch')  || cardOracleText.includes('five 1/1 white Clown Robot')){\r\n    //   debugger\r\n    // }\r\n\r\n    let cardDoesMakeTokenWithTypes = true;\r\n    let types = typeLine.split( ' ' );\r\n    types = types.filter( text => text != '—' && text != 'Token' && text != 'token' );\r\n\r\n    if ( !typeLine.includes( \"Legendary\" ) && cardOracleText.toLocaleLowerCase().includes( \", a legendary\" ) ) {\r\n      return false;\r\n    }\r\n\r\n    let typeReverseSearchString = \"\";\r\n\r\n    let subtypeReverseSearchString = \"\";\r\n\r\n    for ( let type of types ) {\r\n      if ( type === \"Legendary\" ) {\r\n        //do nothing\r\n      }\r\n\r\n      else if ( type === \"Snow\" ) {\r\n        typeReverseSearchString += \" snow\";\r\n      }\r\n\r\n      else if ( type === \"Enchantment\" ) {\r\n        typeReverseSearchString += \" enchantment\";\r\n      }\r\n\r\n      else if ( type === \"Artifact\" ) {\r\n        typeReverseSearchString += \" artifact\";\r\n      }\r\n\r\n      else if ( type === \"Creature\" ) {\r\n        typeReverseSearchString += \" creature\";\r\n      }\r\n      else {\r\n        subtypeReverseSearchString += ( \" \" + type.toLocaleLowerCase() );\r\n      }\r\n    };\r\n    typeReverseSearchString += \" token\"\r\n\r\n    if ( !cardOracleText.toLocaleLowerCase().includes( subtypeReverseSearchString + typeReverseSearchString ) ) {\r\n      cardDoesMakeTokenWithTypes = false;\r\n    }\r\n\r\n    return cardDoesMakeTokenWithTypes;\r\n  }\r\n\r\n  processPowerAndToughness( cardOracleText: string, token: Token ) {\r\n    if ( !token.Power && !cardOracleText.includes( \"reature token\" ) ) {\r\n      return true;\r\n    }\r\n\r\n    if ( !token.Power && cardOracleText.includes( \"reature token\" ) ) {\r\n      return false;\r\n    }\r\n\r\n    if ( token.Power === '*' || token.Toughness === '*' ) {\r\n      let powerMatches = false;\r\n      let toughnessMatches = false;\r\n\r\n      powerMatches = ( token.Power === '*' && cardOracleText.includes( 'X\\/' ) )\r\n        || ( token.Power === '*' && ( cardOracleText.toLocaleLowerCase().includes( 'equal' ) && token.Power === '*' && cardOracleText.toLocaleLowerCase().includes( 'power' ) ) );\r\n\r\n      toughnessMatches = ( token.Toughness === '*' && cardOracleText.includes( '\\/X' ) )\r\n        || ( token.Toughness === '*' && ( cardOracleText.toLocaleLowerCase().includes( 'equal' ) && token.Toughness === '*' && cardOracleText.toLocaleLowerCase().includes( 'toughness' ) ) );\r\n\r\n      if ( token.Power != '*' )\r\n        powerMatches = cardOracleText.includes( token.Power + \"\\/X\" );\r\n\r\n      if ( token.Toughness != '*' ) {\r\n        toughnessMatches = cardOracleText.includes( \"X\\/\" + token.Toughness );\r\n      }\r\n\r\n      return powerMatches && toughnessMatches;\r\n\r\n    } else if ( token.Power !== '*' && token.Toughness !== '*' && cardOracleText.includes( token.Power + \"\\/\" + token.Toughness ) ) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  processTokenText( cardText: string, tokenText: string, cardname: string ) {\r\n    if ( cardText.includes( \"It has\" ) ) {\r\n      const cardGives = cardText.split( '\"' )[ 1 ];\r\n      if ( tokenText === cardGives ) {\r\n        return true;\r\n      }\r\n      else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    //REMOVE REMINDER TEXT\r\n    tokenText = tokenText.replace( /\\s?\\(.*\\)/g, '' );\r\n    cardText = cardText.replace( /\\s?\\(.*\\)/g, '' );\r\n\r\n    if ( tokenText === \"creature is all colors.\" && cardText.includes( \"all colors\" ) ) {\r\n      return true;\r\n    }\r\n\r\n    if ( cardText.match( /tokens? with/g ) && !cardText.includes( 'with haste' ) && !tokenText ) {\r\n      return false;\r\n    }\r\n\r\n    if ( tokenText && tokenText.length > 0 ) {\r\n      cardText = cardText.toLocaleLowerCase();\r\n      const regexForTokenTextInCardText = /with [\\w|\\s|\\d|/|\"|'|,|\\{|\\}|\\:]*\\./g;\r\n      const regexForItAndTheyGain = /\" [\\w|\\s|\\d|/|\"|'|,|\\{|\\}|\\:]*\\./g;\r\n\r\n      let cardTextTokenKeywordsSubstring =\r\n        cardText.match( regexForTokenTextInCardText ) ?\r\n          cardText.match( regexForTokenTextInCardText ) :\r\n          ( cardText.match( regexForItAndTheyGain ) ? cardText.match( regexForItAndTheyGain ) : [] );\r\n\r\n      const cardTokenTextGranter = cardText.match( /\\\".*\\\"/g ) ? cardText.match( /\\\".*\\\"/g ) : [];\r\n      const cardTextRelevantBits = cardTokenTextGranter.concat( cardTextTokenKeywordsSubstring );\r\n\r\n      tokenText = tokenText.toLocaleLowerCase();\r\n      let linesOfTextToken = tokenText.split( '\\n' );\r\n      let keywordsOnToken = linesOfTextToken[ 0 ].split( ',' );\r\n      linesOfTextToken.shift()\r\n      const lineSegmentsOnToken = keywordsOnToken.concat( linesOfTextToken );\r\n\r\n\r\n      // Check to see if token text is on card\r\n      for ( let segmentOnToken of lineSegmentsOnToken ) {\r\n        let includesLineSegment = false;\r\n        for ( let cardTextBit of cardTextRelevantBits ) {\r\n          if ( cardTextBit.includes( segmentOnToken.toLocaleLowerCase() ) ) {\r\n            includesLineSegment = true;\r\n          }\r\n        }\r\n\r\n        if ( !includesLineSegment ) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n\r\n    }\r\n    else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  compareColors( cardText: string, tokenColors: ScryfallColor[] ) {\r\n    if ( tokenColors.length === 5 && cardText.toLocaleLowerCase().includes( \"all colors\" ) ) {\r\n      return true;\r\n    }\r\n    let choppedOnCreateText = cardText.match( /(c|C)reate(s?) [\\w|\\s|\\d|/|’|,]*token/g );\r\n    !choppedOnCreateText ? choppedOnCreateText = [ cardText ] : [];\r\n    cardText.includes( \"hoose four.\" ) ? console.log( choppedOnCreateText ) : [];\r\n    for ( const tokenCreationText of choppedOnCreateText ) {\r\n      if ( tokenColors.length === 0 && tokenCreationText.toLocaleLowerCase().includes( \"colorless\" ) ) {\r\n        return true;\r\n      } else {\r\n        if (\r\n          ( tokenColors.includes( ScryfallColor.W ) && !tokenCreationText.toLocaleLowerCase().includes( \" white\" ) )\r\n          || ( !tokenColors.includes( ScryfallColor.W ) && tokenCreationText.toLocaleLowerCase().includes( \" white\" ) )\r\n        ) {\r\n          return false;\r\n        }\r\n        if (\r\n          ( tokenColors.includes( ScryfallColor.U ) && !tokenCreationText.toLocaleLowerCase().includes( \" blue\" ) )\r\n          || ( !tokenColors.includes( ScryfallColor.U ) && tokenCreationText.toLocaleLowerCase().includes( \" blue\" ) )\r\n        ) {\r\n          return false;\r\n        }\r\n        if (\r\n          tokenColors.includes( ScryfallColor.B ) && !tokenCreationText.toLocaleLowerCase().includes( \" black\" )\r\n          || ( !tokenColors.includes( ScryfallColor.B ) && tokenCreationText.toLocaleLowerCase().includes( \" black\" ) )\r\n        ) {\r\n          return false;\r\n        }\r\n        if (\r\n          tokenColors.includes( ScryfallColor.R ) && !tokenCreationText.toLocaleLowerCase().includes( \" red\" )\r\n          || ( !tokenColors.includes( ScryfallColor.R ) && tokenCreationText.toLocaleLowerCase().includes( \" red\" ) )\r\n        ) {\r\n          return false;\r\n        }\r\n        if (\r\n          tokenColors.includes( ScryfallColor.G ) && !tokenCreationText.toLocaleLowerCase().includes( \" green\" )\r\n          || ( !tokenColors.includes( ScryfallColor.G ) && tokenCreationText.toLocaleLowerCase().includes( \" green\" ) )\r\n        ) {\r\n          return false;\r\n        }\r\n\r\n        return true;\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  compareColorsByArray( card1Colors: ScryfallColor[], card2Colors: ScryfallColor[] ) {\r\n    if (\r\n      ( ( card1Colors.includes( ScryfallColor.B ) && card2Colors.includes( ScryfallColor.B ) ) || ( !card1Colors.includes( ScryfallColor.B ) && !card2Colors.includes( ScryfallColor.B ) ) )\r\n      && ( ( card1Colors.includes( ScryfallColor.W ) && card2Colors.includes( ScryfallColor.W ) ) || ( !card1Colors.includes( ScryfallColor.W ) && !card2Colors.includes( ScryfallColor.W ) ) )\r\n      && ( ( card1Colors.includes( ScryfallColor.U ) && card2Colors.includes( ScryfallColor.U ) ) || ( !card1Colors.includes( ScryfallColor.U ) && !card2Colors.includes( ScryfallColor.U ) ) )\r\n      && ( ( card1Colors.includes( ScryfallColor.R ) && card2Colors.includes( ScryfallColor.R ) ) || ( !card1Colors.includes( ScryfallColor.R ) && !card2Colors.includes( ScryfallColor.R ) ) )\r\n      && ( ( card1Colors.includes( ScryfallColor.G ) && card2Colors.includes( ScryfallColor.G ) ) || ( !card1Colors.includes( ScryfallColor.G ) && !card2Colors.includes( ScryfallColor.G ) ) )\r\n    )\r\n      return true;\r\n\r\n    return false;\r\n  }\r\n\r\n  isGoldDragon( token: Token ): boolean {\r\n    let cardsNamedSODND: ScryfallCard[];\r\n    if ( token.CreatedBy ) {\r\n      cardsNamedSODND = token.CreatedBy.filter( createdBy => createdBy.name === 'Sword of Dungeons & Dragons' );\r\n    }\r\n    return cardsNamedSODND.length > 0;\r\n  }\r\n}\r\n","<div *ngIf=\"isLoading\">LOADING....</div>\r\n<div *ngIf=\"orphanedCards.length\">Orphaned Token Generators: </div>\r\n<span *ngFor=\"let card of orphanedCards\">\r\n  <span scope=\"col\">{{card.name}},</span>\r\n</span>\r\n<table class=\"table\">\r\n    <thead class=\"thead-dark\">\r\n      <tr>\r\n        <!-- <th scope=\"col\">Owned</th>\r\n        <th scope=\"col\">Wanted</th> -->\r\n        <th scope=\"col\">P/T</th>\r\n        <th scope=\"col\">Colors</th>\r\n        <th scope=\"col\">Name</th>\r\n        <th scope=\"col\">Type Line</th>\r\n        <th scope=\"col\">Text</th>\r\n        <!-- <th scope=\"col\">Sets</th> -->\r\n        <th scope=\"col\">Cards that Create</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody class=\"table-striped\">\r\n      <tr *ngFor=\"let token of tokens\" [ngClass]=\"{highlighted : token?.CreatedBy?.length > 9}\">\r\n        <!-- <td scope=\"col\"><input type=\"number\" [(ngModel)]=\"token.Owned\"/></td>\r\n        <td scope=\"col\"><input type=\"number\" [(ngModel)]=\"token.Wanted\"/></td> -->\r\n        <td scope=\"col\"><span *ngIf=\"token.Power && token.Toughness\">{{token.Power}}/{{token.Toughness}}</span></td>\r\n        <td scope=\"col\">\r\n          <span *ngFor=\"let color of token.Colors\" class=\"symbol color-{{color}}\">{{color}}</span>          \r\n          <span *ngIf=\"token.Name === 'Giant Teddy Bear'\" class=\"symbol color-pink\">P</span>\r\n          <span *ngIf=\"isGoldDragon(token)\" class=\"symbol color-gold\">Au</span>\r\n\r\n        </td>\r\n        <td scope=\"col\">{{token.Name}}</td>\r\n        <td scope=\"col\">{{token.TypeLine | slice: 5 : token.TypeLine.length}}</td>\r\n        <td scope=\"col\">{{token.Text}}</td>\r\n        <!-- <td scope=\"col\"><span *ngFor=\"let edition of token.Editions\">{{edition}},</span></td> -->\r\n        <td scope=\"col\">\r\n            <!-- <div *ngIf=\"token?.CreatedBy?.length <= 9\"> -->\r\n                <span *ngFor=\"let card of token.CreatedBy\" class=\"badge card-pill\" [ngClass]=\"card.rarity\">{{card.name}}</span>\r\n            <!-- </div>\r\n            <div *ngIf=\"token?.CreatedBy?.length > 9\">\r\n                {{token.CreatedBy.length}}\r\n            </div> -->\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n","export const problemCards = \r\n// TODO: Fix These\r\n [\r\n\r\n  // These create one exsisting token and one not-exsisting token\r\n  \"Evil Comes to Fruition\",\r\n  \"One Dozen Eyes\",\r\n  // A HUGE PROBLEM ALL IT'S OWN, but also makes exsisting and non-exsisting tokens\r\n  \"Sarpadian Empires, Vol. VII\",\r\n\r\n  //OLD and make no exsisting token\r\n  \"Abian, Luvion Usurper\",\r\n  \"Balduvian Dead\",\r\n  \"Baru, Fist of Krosa\",\r\n  \"Basalt Golem\",\r\n  \"Blessed Sanctuary\",\r\n  \"Bone Rattler\",\r\n  \"Boris Devilboon\",\r\n  \"Bottle of Suleiman\",\r\n  \"Broken Visage\",\r\n  \"Caribou Range\",\r\n  \"Carrion\",\r\n  \"Chicken Egg\",\r\n  \"Daring Piracy\",\r\n  \"Diamond Kaleidoscope\",\r\n  \"D00-DL, Caricaturist\",  \r\n  \"Dune-Brood Nephilim\",\r\n  \"Dungeon Master\",\r\n  \"Elephant Resurgence\",\r\n  \"Errand of Duty\",\r\n  \"Evil Boros Charm\",\r\n  \"Firecat Blitz\",\r\n  \"Generated Horizons\",\r\n  \"Gemini Engine\",\r\n  \"Giant Caterpillar\",\r\n  \"Goblin Cruciverbalist\",\r\n  \"Goblin Scouts\",\r\n  \"Goldmeadow Lookout\",\r\n  \"Gorilla Tactics\",\r\n  \"Gunk Slug\",\r\n  \"Handy Dandy Clone Machine\",\r\n  \"Haunted Angel\",\r\n  \"Helm of Kaldra\",\r\n  \"Homarid Spawning Bed\",\r\n  \"Hunted Horror\",\r\n  \"Imaginary Friends\",\r\n  \"Infernal Genesis\",\r\n  \"Jungle Patrol\",\r\n  \"Keeper of the Beasts\",\r\n  \"Kjeldoran Home Guard\",\r\n  \"Lita, Mechanical Engineer\",\r\n  \"Master of the Hunt\",\r\n  \"Master of the Wild Hunt Avatar\",\r\n  \"Mirrored Lotus\",\r\n  \"Mongrel Pack\",\r\n  \"Monkey Cage\",\r\n  \"Nuisance Engine\",\r\n  \"Penumbra Kavu\",\r\n  \"Phantasmal Sphere\",\r\n  \"Phelddagrif\",\r\n  \"Pick Your Poison\",\r\n  \"Pure Reflection\",\r\n  \"Questing Phelddagrif\",\r\n  \"Rally the Horde\",\r\n  \"Riptide Replicator\",\r\n  \"Saproling Burst\",\r\n  \"Sek'Kuar, Deathkeeper\",\r\n  \"Serpent Generator\",\r\n  \"Skirk Ridge Exhumer\",\r\n  \"Slivdrazi Monstrosity\",\r\n  \"Sound the Call\",\r\n  \"Spawning Pit\",\r\n  \"Spike Breeder\",\r\n  \"Spiny Starfish\",\r\n  \"Spirit Mirror\",\r\n  \"Splintering Wind\",\r\n  \"Summoning Station\",\r\n  \"Symbol Status\",\r\n  \"Tatsumasa, the Dragon's Fang\",\r\n  \"Tetravus\",\r\n  \"The Iron Guardian Stirs\",\r\n  \"The Legend of Arena\",\r\n  \"Time Sidewalk\",\r\n  \"Tomb of Urami\",\r\n  \"Tombstone Stairwell\",\r\n  \"Uktabi Kong\",\r\n  \"Volrath's Laboratory\",\r\n  \"Wall of Kelp\",\r\n  \"Wand of the Elements\",\r\n  \"Waste Land\",\r\n  \"Waylay\",\r\n  \"Wirefly Hive\",\r\n  \"Wurmcalling\"\r\n];","import { ScryfallCard } from \"scryfall-ts/build/ScryfallCard\";\r\nimport { ScryfallColor } from \"scryfall-ts/build/ScryfallColor\";\r\nimport { ScryfallImages } from \"scryfall-ts/build/ScryfallImages\";\r\n\r\nexport class Token {\r\n    Owned: number;\r\n    Wanted: number;\r\n    Power: string;\r\n    Toughness: string;\r\n    Colors: ScryfallColor[];\r\n    Name: string;\r\n    TypeLine: string;\r\n    Text: string;\r\n    Editions: string[];\r\n    CreatedBy: ScryfallCard[];\r\n    ImageURL: ScryfallImages;\r\n\r\n    constructor(\r\n        Power: string,\r\n        Toughness: string,\r\n        Colors: ScryfallColor[],\r\n        Name: string,\r\n        TypeLine: string,\r\n        Text: string,\r\n        ImageURL: ScryfallImages ) {\r\n        this.Power = Power;\r\n        this.Toughness = Toughness;\r\n        this.Colors = Colors;\r\n        this.Name = Name;\r\n        this.TypeLine = TypeLine;\r\n        this.Text = Text;\r\n        this.ImageURL = ImageURL;\r\n        this.CreatedBy = [];\r\n    }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ScryfallAPIResponse } from '../scryfall-apiresponse';\r\nimport {forkJoin, Observable} from 'rxjs';\r\nimport { TribalData } from './types/tribal-data';\r\nimport { environment } from '../../environments/environment';\r\nimport { TribalService } from './tribal.service';\r\n\r\n@Component({\r\n  selector: 'app-tribal',\r\n  templateUrl: './tribal.component.html',\r\n  styleUrls: ['./tribal.component.css']\r\n})\r\nexport class TribalComponent implements OnInit {\r\n\r\n  creatureTypeData: TribalData[] = [];\r\n  constructor(private readonly tribalService: TribalService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.tribalService.getTribeData()\r\n    this.tribalService.tribesList.subscribe(() => this.tribalService.computeTribalStats());\r\n    this.tribalService.tribeData.subscribe(data => this.creatureTypeData = data);\r\n  }\r\n\r\n  cardsWithTypeHref(creatureType: string){\r\n    return `https://scryfall.com/search?q=t%3A${creatureType}+game%3Apaper+-is%3Afunny&unique=cards&as=grid&order=color`\r\n  }\r\n\r\n  commandersWithTypeHref(creatureType: string){\r\n    return `https://scryfall.com/search?q=+t%3A${creatureType}+is%3Acommander+format%3Acommander+game%3Apaper+-is%3Afunny&unique=cards&as=grid&order=color`\r\n  }\r\n\r\n  silverBorderedCardsWithTypeHref(creatureType: string){\r\n    return `https://scryfall.com/search?q=t%3A${creatureType}+game%3Apaper+is%3Afunny&unique=cards&as=grid&order=color`\r\n  }\r\n\r\n  silverBorderedCommandersHref(creatureType: string){\r\n    return `https://scryfall.com/search?q=+t%3A${creatureType}+is%3Acommander+format%3Acommander+game%3Apaper+is%3Afunny&unique=cards&as=grid&order=color`\r\n  }\r\n\r\n  makesTokensOfTypeHref(creatureType: string) {\r\n    return `https://scryfall.com/search?q=fo%3A%2F%5Cb${creatureType}%5Cb%2F+game%3Apaper+-is%3Afunny+fo%3Acreate&unique=cards`;\r\n  }\r\n}\r\n","<table class=\"table table-striped table-bordered\">\r\n    <thead>\r\n      <tr>\r\n        <th scope=\"col\">Creature Type</th>\r\n        <th scope=\"col\">Cards w/ Type</th>\r\n        <th scope=\"col\">Commanders</th>\r\n        <th scope=\"col\">Makes Tokens</th>\r\n        <th scope=\"col\">Turns Into Type</th>\r\n        <th scope=\"col\">Hozes Type</th>\r\n        <th scope=\"col\">Tribal Effects/Lords</th>\r\n        <th scope=\"col\">Viability</th>\r\n        <th scope=\"col\" class=\"silver\" >Un-Cards w/ Type</th>\r\n        <th scope=\"col\" class=\"silver\">Un-Commanders</th>\r\n        <th scope=\"col\" class=\"silver\">Un-Tribal Effects/Lords</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr *ngFor=\"let tribe of creatureTypeData\" [ngClass]=\"\">\r\n        <th scope=\"col\">{{tribe.creatureType}}</th>\r\n        <td scope=\"col\">\r\n          <a target=\"_blank\" [href]=\"cardsWithTypeHref(tribe.creatureType)\">\r\n            {{tribe.cardsWithType}}\r\n          </a>\r\n        </td>\r\n        <td scope=\"col\">\r\n          <a target=\"_blank\" [href]=\"commandersWithTypeHref(tribe.creatureType)\">\r\n          {{tribe.commandersWithType}}\r\n        </a>\r\n        </td>\r\n        <td scope=\"col\">\r\n          <a target=\"_blank\" [href]=\"makesTokensOfTypeHref(tribe.creatureType)\">\r\n            {{tribe.makesTokensOfType}}\r\n          </a>\r\n        </td>\r\n        <td scope=\"col\"><a>{{tribe.turnsIntoCreatureOfType}}</a></td>\r\n        <td scope=\"col\"><a>{{tribe.hozesType}}</a></td>\r\n        <td scope=\"col\"><a>{{tribe.lordsOfType}}</a></td>\r\n        <td scope=\"col\">N/A</td>\r\n        <td scope=\"col\" class=\"silver\">\r\n          <a target=\"_blank\" [href]=\"silverBorderedCardsWithTypeHref(tribe.creatureType)\">\r\n            {{tribe.silverBorderedCardsWithType}}\r\n          </a>\r\n        </td>\r\n        <td scope=\"col\" class=\"silver\">\r\n          <a target=\"_blank\" [href]=\"silverBorderedCommandersHref(tribe.creatureType)\">\r\n            {{tribe.silverBorderedCommanders}}\r\n          </a>\r\n        </td>\r\n        <td scope=\"col\" class=\"silver\"><a>{{tribe.silverBorderedLords}}</a></td>\r\n      </tr>\r\n    </tbody>\r\n  </table>","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, forkJoin, Observable, of, } from 'rxjs';\r\nimport {map, catchError} from 'rxjs/operators';\r\n\r\nimport { environment } from '../../environments/environment';\r\n\r\nimport { ScryfallAPIResponse } from '../scryfall-apiresponse';\r\nimport { TribalData } from './types/tribal-data';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TribalService {\r\n    tribesListSource = new BehaviorSubject<string[]>([]);\r\n    tribesList = this.tribesListSource.asObservable();\r\n\r\n    tribeDataSource = new BehaviorSubject<TribalData[]>([]);\r\n    tribeData = this.tribeDataSource.asObservable();\r\n\r\n    noCards: ScryfallAPIResponse= {total_cards: 0, data: null, has_more: false, next_page: 'no', object: ''}\r\n\r\n  constructor(private $http: HttpClient) { }\r\n\r\n  getTribeData(){\r\n    this.$http.get<ScryfallAPIResponse>(\"https://api.scryfall.com/catalog/creature-types\")\r\n    .subscribe(response => {\r\n            this.tribesListSource.next(response.data as string [])\r\n        })\r\n  }\r\n\r\n  computeTribalStats() {\r\n      for(let tribe of this.tribesListSource.getValue()){\r\n    \r\n      const observables: Observable<ScryfallAPIResponse>[] = [];\r\n      //cards\r\n      observables.push(\r\n        this.$http.get<ScryfallAPIResponse>(environment.prefix + `/search?q=t%3A${tribe}+game%3Apaper+-is%3Afunny`)\r\n        .pipe(\r\n            catchError(() => of(this.noCards))\r\n        )\r\n      )\r\n      //commanders\r\n       observables.push(\r\n        this.$http.get<ScryfallAPIResponse>(environment.prefix + `/search?q=t%3A${tribe}+is%3Acommander+game%3Apaper+-is%3Afunny`)\r\n        .pipe(\r\n            catchError(() => of(this.noCards))\r\n        )\r\n        )\r\n      //token makers\r\n      observables.push(\r\n        this.$http.get<ScryfallAPIResponse>(environment.prefix + `/search?q=fo%3A%2F%5Cb${tribe}%5Cb%2F+game%3Apaper+-is%3Afunny+fo%3Acreate&unique=cards`)\r\n        .pipe(\r\n            catchError(() => of(this.noCards))\r\n        )\r\n        )\r\n      //becomes\r\n    //   observables.push(this.$http.get<ScryfallAPIResponse>(environment.prefix + \"/search?q=o%3A%2Fbecome%28s%29%3F+.*\" + tribe.creatureType + \".%2F\" + \"-is%3Afunny\" ))\r\n      //hozes\r\n    //   observables.push(this.$http.get<ScryfallAPIResponse>(environment.prefix + \"/search?q=t%3A\" + tribe.creatureType))\r\n      //lords\r\n    //   observables.push(this.$http.get<ScryfallAPIResponse>(environment.prefix + \"/search?q=t%3A\" + tribe.creatureType))\r\n \r\n    //joke cards\r\n    observables.push(\r\n        this.$http.get<ScryfallAPIResponse>(environment.prefix + `/search?q=t%3A${tribe}+game%3Apaper+is%3Afunny`)\r\n        .pipe(\r\n            catchError(() => of(this.noCards))\r\n        )\r\n      )\r\n    \r\n      //funny commanders\r\n       observables.push(\r\n        this.$http.get<ScryfallAPIResponse>(environment.prefix + `/search?q=t%3A${tribe}+is%3Acommander+game%3Apaper+is%3Afunny`)\r\n        .pipe(\r\n            catchError(() => of(this.noCards))\r\n        )\r\n        )\r\n        //funny lords\r\n    //   observables.push(this.$http.get<ScryfallAPIResponse>(environment.prefix + \"/search?q=t%3A\" + tribe.creatureType))\r\n      forkJoin(observables).subscribe(\r\n        (tribeDataResponses) => this.assignTribeData(tribe, tribeDataResponses), \r\n      (tribeDataResponses) => this.assignTribeData(tribe, tribeDataResponses)\r\n      );\r\n    }\r\n  }\r\n\r\n  assignTribeData(tribe: string, tribeDataResponses: ScryfallAPIResponse[]){\r\n    console.log(tribeDataResponses)\r\n    const tribeData = {} as TribalData;\r\n    tribeData.creatureType = tribe;\r\n    tribeData.cardsWithType = tribeDataResponses[0].total_cards;\r\n    tribeData.commandersWithType = tribeDataResponses[1].total_cards;\r\n        // tribe.turnsIntoCreatureOfType = tribeDataResponses[2].total_cards;\r\n        // tribe.hozesType = tribeDataResponses[3].total_cards;\r\n        // tribe.lordsOfType = tribeDataResponses[4].total_cards;\r\n        tribeData.makesTokensOfType = tribeDataResponses[2].total_cards;\r\n    tribeData.silverBorderedCardsWithType = tribeDataResponses[3].total_cards;\r\n        // tribe.silverBorderedLords = tribeDataResponses[5].total_cards;\r\n\r\n        tribeData.silverBorderedCommanders = tribeDataResponses[4].total_cards;\r\n    this.tribeDataSource.value.push(tribeData);\r\n    this.tribeDataSource.value.sort((a, b) => {\r\n        var textA = a.creatureType.toUpperCase();\r\n        var textB = b.creatureType.toUpperCase();\r\n        return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\r\n    });\r\n  }\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  prefix: \"https://api.scryfall.com/cards\"\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"names":["RouterModule","DeckMuseComponent","HomeComponent","JanklordCommanderGeneratorComponent","TokenComponent","TribalComponent","routes","path","component","AppRoutingModule","_","_2","_3","forRoot","imports","i1","exports","AppComponent","constructor","title","selectors","decls","vars","template","AppComponent_Template","rf","ctx","i0","ɵɵelement","BrowserModule","provideHttpClient","withInterceptorsFromDi","DatePipe","AppModule","bootstrap","declarations","forkJoin","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","color_r1","ɵɵtemplate","DeckMuseComponent_div_3_div_7_Template","ɵɵtextInterpolate2","ctx_r1","ideas","ɵɵproperty","colorsForIdea","$http","subscriptions","sets","color","themes","ngOnInit","observables","set","push","get","subscribe","results","generateDeckIdea","forEach","isColor","Math","floor","random","ideaCategory1","ideaCategory2","numberOfChoices1","data","length","numberOfChoices2","randomChoice1","randomChoice2","ɵɵdirectiveInject","HttpClient","consts","DeckMuseComponent_Template","ɵɵlistener","DeckMuseComponent_Template_button_click_1_listener","DeckMuseComponent_div_3_Template","HomeComponent_Template","ɵɵpureFunction0","_c0","_c1","_c2","_c3","newCommander","url","response","selectedCommander","keywords","includes","partner","JanklordCommanderGeneratorComponent_Template","JanklordCommanderGeneratorComponent_Template_button_click_2_listener","name","TokenService","dedupeTokens","tokens","uniqueTokens","token","isDupe","Text","TypeLine","replace","i","Name","Power","Toughness","Colors","toString","getCardByUri","ɵɵinject","factory","ɵfac","providedIn","BehaviorSubject","ScryfallColor","environment","Token","problemCards","ɵɵtextInterpolate1","card_r1","token_r2","ɵɵclassMapInterpolate1","color_r3","card_r4","rarity","TokenComponent_tr_19_span_2_Template","TokenComponent_tr_19_span_4_Template","TokenComponent_tr_19_span_5_Template","TokenComponent_tr_19_span_6_Template","TokenComponent_tr_19_span_15_Template","ɵɵpureFunction1","CreatedBy","ctx_r4","isGoldDragon","ɵɵpipeBind3","datePipe","tokenService","cardsThatMakeTokens","orphanedCards","loadingSource","loading","asObservable","isLoading","getNextPageOfCards","prefix","makeDateStringForTomorrow","value","console","log","subscription","unsubscribe","associateCardsWithTokens","ngOnDestrory","today","Date","tomorrow","setDate","getDate","transform","clearOldData","tokenOrCard","has_more","next_page","index","card_faces","face","illustration_id","colors","W","tokenData","power","toughness","type_line","oracle_text","image_uris","cardUri","all_parts","filter","part","uri","card","tokenInstance","next","sort","a","b","concat","error","tokensThisCardMakes","germToken","find","phyrexianGermToken","relatedCard","tempTokens","split","compareColorsByArray","findTokensMadeByCardOracleText","createsNothing","allFacesText","faces","bloodToken","foodToken","treasureToken","powerstoneToken","goldToken","walkerToken","clueToken","toLocaleLowerCase","copyToken","processTokenText","tempToken","processPowerAndToughness","processTypeLine","compareColors","cardTextLowerCase","typeLine","cardOracleText","cardDoesMakeTokenWithTypes","types","text","typeReverseSearchString","subtypeReverseSearchString","type","powerMatches","toughnessMatches","cardText","tokenText","cardname","cardGives","match","regexForTokenTextInCardText","regexForItAndTheyGain","cardTextTokenKeywordsSubstring","cardTokenTextGranter","cardTextRelevantBits","linesOfTextToken","keywordsOnToken","shift","lineSegmentsOnToken","segmentOnToken","includesLineSegment","cardTextBit","tokenColors","choppedOnCreateText","tokenCreationText","U","B","R","G","card1Colors","card2Colors","cardsNamedSODND","createdBy","i2","i3","TokenComponent_Template","TokenComponent_div_0_Template","TokenComponent_div_1_Template","TokenComponent_span_2_Template","TokenComponent_tr_19_Template","ImageURL","tribe_r1","creatureType","cardsWithTypeHref","ɵɵsanitizeUrl","cardsWithType","commandersWithTypeHref","commandersWithType","makesTokensOfTypeHref","makesTokensOfType","turnsIntoCreatureOfType","hozesType","lordsOfType","silverBorderedCardsWithTypeHref","silverBorderedCardsWithType","silverBorderedCommandersHref","silverBorderedCommanders","silverBorderedLords","tribalService","creatureTypeData","getTribeData","tribesList","computeTribalStats","tribeData","TribalService","TribalComponent_Template","TribalComponent_tr_26_Template","of","catchError","tribesListSource","tribeDataSource","noCards","total_cards","object","tribe","getValue","pipe","tribeDataResponses","assignTribeData","textA","toUpperCase","textB","production","enableProdMode","__NgCli_bootstrap_1","platformBrowser","bootstrapModule","catch","err"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}